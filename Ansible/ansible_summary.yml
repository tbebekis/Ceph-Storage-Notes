#-----------------------------------------------------------------------------------
#                     AntyxSoft (tbebekis@antyxsoft.com)
#-----------------------------------------------------------------------------------

- hosts: all
  # remote_user: root             # User used to log into the target via the connection plugin. You may login as this user and then "become" someone else
  become: yes                     # Boolean that controls if privilege escalation is used or not on Task execution.
  become_user: root               # User that you ‘become’ after using privilege escalation. The remote/login user must have permissions to become this user.
  become_method: sudo
  # gather_facts: no
  # any_errors_fatal: true        # aborts playbook execution if a fatal error occurs in any of the specified hosts

  ##########################################
  # Variables - Varialbe Referene: https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html
  ##########################################

  # inline variables
  vars:
    var1: value1
    var2: value2

  # variables in external files    
  vars_files:                     # a list of one or more variable files
    - /path/to/var/file1 
    - /path/to/var/file2
# variable files format
# var1: value1
# var2: value2     
 
# variables can also be passed in the command line, e.g.
#   ansible-playbook my_playbook.yml --extra-vars "var1=value1 var2=value2"
 
# There is also the include_vars modules which can be used to load
# variables from a single file or a directory
# SEE: https://docs.ansible.com/ansible/latest/modules/include_vars_module.html

  ##########################################
  # Some useful modules - Module Reference: https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html
  ##########################################
  tasks:
  # yum - https://docs.ansible.com/ansible/latest/modules/yum_module.html
  - name: the yum module executes yum commands. This example ensures apache is at the latest version
    yum:                       
      name: httpd
      state: latest

  # service - https://docs.ansible.com/ansible/latest/modules/service_module.html
  - name: The service module controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart. This example ensures that apache is running
    service:
      name: httpd
      state: started      

  - name: Restart network service for interface eth0
    service:
      name: network
      state: restarted
      args: eth0      
  
  # file - https://docs.ansible.com/ansible/latest/modules/file_module.html
  - name: the file module sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the file module - including copy, template, and assemble.
    file:                      
      path: /etc/{{ some_variable_here }}.conf
      owner: foo
      group: foo    
      mode: 0644                          # when specifying mode using octal numbers, add a leading 0

  # copy - https://docs.ansible.com/ansible/latest/modules/copy_module.html
  - name: the copy module copies a file from the local or remote machine to a location on the remote machine. Example copying file with owner and permissions
    copy:
      src: /srv/myfiles/foo.conf
      dest: /etc/foo.conf
      owner: "{{ some_variable_here }}" # YAML syntax requires that if you start a value with {{ foo }} you quote the whole line, since it wants to be sure you aren’t trying to start a YAML dictionary. 
      group: foo
      mode: 0644
      remote_src: no                    # If no (the default), it will search for src at originating/manager machine. If yes it will go to the remote/target machine for the src. Default is no.

  # command - https://docs.ansible.com/ansible/latest/modules/command_module.html
  - name: The command module takes the command name followed by a list of space-delimited arguments. It is NOT executed through the shell, so variables like $HOME and operations like "<", ">", "|", ";" and "&" will not work. This example returns motd to registered var
    command: cat /etc/motd
    register: mymotd                    # "registers" a variable as a result of this task. Results will vary from module to module. Use of -v when executing playbooks will show possible values for the results.

  - name: Another example of the command module. It runs the command ONLY if the specified file does not exist.
    command: /usr/bin/make_database.sh arg1 arg2 || /bin/true        # in case when successful exit code is not zero
    args:
      creates: /path/to/database        # the "creates" section gets a filename or (since 2.0) glob pattern. If it already exists, this step won't be run. It makes the task indepotent

  - name: This example executes a script
    command: sh /home/test_user/test.sh      

  # script - https://docs.ansible.com/ansible/latest/modules/script_module.html
  - name: Runs a local script on a remote node after transferring it. The script will be processed through the shell environment. This example runs a script only if file.txt exists on the remote node
    script: /some/local/remove_file.sh --some-argument 1234
    chdir: /a/path/on/the/remote/machine    # Change into this directory on the remote node before running the script.
    args:
      removes: /the/removed/file.txt        # A filename on the remote node, when it does not exist, this step will not be run. Makes the task indepotent

  # shell - https://docs.ansible.com/ansible/latest/modules/shell_module.html
  - name: The shell module takes the command name followed by a list of space-delimited arguments. It is almost exactly like the command module but runs the command through a shell (/bin/sh) on the remote node.
    shell: /usr/bin/foo || /bin/true        # in case when successful exit code is not zero
    register: foo_result                    # registers a variable to be used in the next example
    ignore_errors: yes                      # another way to return success

  - name: Executes ONLY if the foo_result result variable of the previous example equals to 5
    shell: /usr/bin/bar
    when: foo_result.rc == 5                # SEE: Conditionals, link: https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html

  - name: The shell module may have multiple lines
    shell: |
      do this
      do that
      do something else
      exit 0

  # template - https://docs.ansible.com/ansible/latest/modules/template_module.html
  - name: The template module gets a source file from the local machine, passes it through the Jinja2 template engine, and copies it to the remote hosts. Link: https://blog.knoldus.com/ansible-playbook-using-templates/     
    template:
      src: /mytemplates/foo.j2
      dest: /etc/file.conf
      owner: bin
      group: wheel
      mode: 0644
      force: yes                            # the default is yes, which will replace the remote file when contents are different than the source. If no, the file will only be transferred if the destination does not exist.

  # slack - https://docs.ansible.com/ansible/latest/modules/slack_module.html
  - name: The slack module sends notification message via Slack  
    slack:
      token: thetoken/generatedby/slack
      msg: 'Megale skisame'
      channel: '#ansible'
     delegate_to: localhost

  # mail - https://docs.ansible.com/ansible/latest/modules/mail_module.html
  - name: The mail module sends emails
    mail:
      host: smtp.gmail.com
      port: 587
      username: username@gmail.com
      password: mysecret
      to: John Smith <john.smith@example.com>
      subject: Ansible-report
      body: This is the body
    delegate_to: localhost     